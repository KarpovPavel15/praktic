/*  
Записать в коротком виде:
let a = a + 5;
let b = b * 15;
let c = c - 3;
let d = d % 2;
let k = a + k;
let l = l * b;
let m = m * 3 * k;
*/
a+=5;
b*=15;
c-=3;
d%=2;
k+=a;
l*=b;
m*=k*3;

 /*Возвести переменную в куб, используя краткую запись. */
let a;
a*=a**a;

/*Если переменная равна “маленький”, присвоить ей значение “большой”, иначе “маленький”. Сделать тоже самое, используя тернарный оператор. */
let a= 'маленький'
///Переделай используя вместо message - a и ===
(a='маленький')? message='большой':message='маленький';
console.log(message)


/*Записать условие, используя условный оператор if: если переменная меньше нуля: присвоить ей строку “меньше нуля” 
если переменная равна нулю: присвоить 1 
если больше нуля: 
используя краткую запись, умножить переменную на 10 Сделать тоже самое, используя тернарный оператор. */
let abc=5;
 if (abc < 0) {
  message = 'меньше нуля';
} else if (abc == 0) {
  message = 1;
} 
 else {
 message =abc*=10;
}
console.log(message); //Переделать без message


(abc<0)?  message='меньше нуля':
(abc ==0)? message=1 :
message=abc*=10;
//переделать более чисто и без message, без () перед ? и используя ===


/*
Используя конструктор switch, записать следующее условие:

if(a == 'котик') {
  console.log('котик');
} else if(a == 'собака') {
  console.log('собака');
} else if(a == 'хомячок') {
  console.log('хомячок');
} else {
  console.log('неизвестное науке животное');
}
*/

let a = 'котик';
switch(a) {
    case 'котик':
        console.log('котик');
        break;
        case 'собака':
            console.log('собака');
            break;
            case 'хомячок':
                console.log('хомячок');
                break;
                default:
                    console.log('неизвестное науке животное');
                    break;
                    
}
//Вложенность в switch - 
// switch(a) {
//     case 'котик': break;
//     case 'котик': break;
//     default: break;

/* Чему равен x в каждом из примеров, объясните почему:
let x = 0 || 'строка'; Выведется строка т.к. Ассоциативность слева направо (более подробно)
let x = 1 && 'строка'; ??
let x = null || 1; ??
let x = null && 1; ??
let x = 1 && null; ??
let x = null || 0 || 1; ??
let x = null && 0 && 1; ??

*/
/*
Чему равен x в каждом из примеров, объясните почему:
let x = 1 + 2 + '3';
Выведется '33' т.к. у 3 тип стринг и всё преобрузуется в строку 
let x = 1 + 2 - '1'; ??

let x = '1' + 2 - 1; ??
let x = true + 1; Выведеия 2 т.к при сложении с число тип бул равен 1

let x = +'1' + 2; ??

let x = null + 2; ??

let x = undefined + 2; ??

let x = true + undefined; ??

 */
